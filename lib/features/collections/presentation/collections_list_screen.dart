import 'package:cloud_firestore/cloud_firestore.dart' show Timestamp;
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:pudding/core/components/loading_overlay.dart';
import 'package:pudding/core/components/page_view_wrappers.dart';
import 'package:pudding/core/logger/logger_providers.dart'
    show TalkerScreen, logger;
import 'package:pudding/core/models/appbar_cfg_model.dart';

import 'package:pudding/features/auth/providers/auth_providers.dart';
import 'package:pudding/features/collections/data/collection_model.dart';
import 'package:pudding/features/collections/providers/collections_providers.dart';

import 'package:pudding/features/puddings/presentation/puddings_screen.dart';

// A ConsumerWidget can listen to providers.
class CollectionsListScreen extends ConsumerWidget {
  // final StreamProvider<List<TheCollection>> streamProvider;
  const CollectionsListScreen({super.key});

  Future<void> handleSignOut(WidgetRef ref) async {
    LoadingOverlay.showDefaultLoading(msg: "Logging out");
    await ref.read(authRepositoryProvider).signOut();
    LoadingOverlay.dismissLoading();
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // 2. "watch" a provider to get its value and rebuild when it changes.
    final collectionsAsyncValue = ref.watch(collectionsStreamProviderAsCollab);

    return pageViewWrapper(
      appBarCfg: AppbarCfgModel(
        leading: IconButton.outlined(
          onPressed: () async => await handleSignOut(ref),

          icon: const Icon(Icons.logout_outlined),
        ),
        titleStr: 'Collections',
        animateColor: true,
      ),
      body: collectionsAsyncValue.when(
        // The .when() method is perfect for handling loading/error states.
        data: (collections) => ListView.builder(
          itemCount: collections.length,
          itemBuilder: (context, index) {
            final collection = collections[index];
            return Card(
              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 6),
              child: ListTile(
                title: Text(collection.title),
                trailing: const Icon(Icons.chevron_right),
                onTap: () {
                  Navigator.of(context).push(
                    MaterialPageRoute(
                      settings: RouteSettings(name: collection.id),
                      // Navigate to the screen for this specific collection.
                      builder: (context) => PuddingsScreen(
                        collectionId: collection.id,
                        collectionTitle: collection.title,
                      ),
                    ),
                  );
                },
              ),
            );
          },
        ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (err, stack) => Center(child: Text('Error: $err')),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _addCollectionDialog(context, ref),
        child: const Icon(Icons.add),
      ),
    );
  }

  void _addCollectionDialog(BuildContext context, WidgetRef ref) {
    final controller = TextEditingController();
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('New Collection'),
        content: TextField(
          controller: controller,
          decoration: const InputDecoration(labelText: 'Collection Title'),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              final userId = ref.read(userIdProvider);
              if (userId != null && controller.text.isNotEmpty) {
                final newCollection = TheCollection(
                  id: '', // ID is generated by Firestore, so it can be empty here.
                  title: controller.text,
                  ownerId: userId,
                  collaborators: [userId],
                  // editLogs: [
                  //    {'create': Timestamp.now()},
                  // ],
                  tags: [],
                );
                // 3. "read" a provider to call a method on it inside a function.
                ref
                    .read(collectionsRepositoryProvider)
                    .addCollection(newCollection);

                logger.info("new collection '${newCollection.title}' created");
                Navigator.of(context).pop();
              }
            },
            child: const Text('Create'),
          ),
        ],
      ),
    );
  }
}
